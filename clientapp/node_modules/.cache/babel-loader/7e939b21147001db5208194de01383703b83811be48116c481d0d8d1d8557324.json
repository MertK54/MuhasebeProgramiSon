{"ast":null,"code":"import axios from 'axios';\nimport swal from 'sweetalert';\nexport default {\n  name: \"InvoiceSaleReturnComponent\",\n  data() {\n    return {\n      invoices: [],\n      formData: {\n        product_name: '',\n        supplier_name: '',\n        supplier_id: 0,\n        quantity: 0,\n        unit_price: 0.00,\n        total_amount: 0.00\n      }\n    };\n  },\n  mounted() {\n    this.getInvoice();\n  },\n  methods: {\n    getInvoice() {\n      const params = {\n        type: 'sale'\n      };\n      axios.post('http://localhost:5280/api/invoice/invoice-get-sale', params, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        if (response != null && response.data != null) this.invoices = response.data;\n      }).catch(error => {\n        swal({\n          title: \"Sale return invoice not listed\",\n          text: \"Error when listing stock\",\n          icon: \"warning\",\n          dangerMode: true\n        });\n        console.error(\"stocks not get\", error);\n      });\n    },\n    returnSaleInvoice(invoice) {\n      this.formDataAddValue(invoice);\n      console.log(\"Form Data:\", this.formData);\n      const params = {\n        supplier_id: this.formData.supplier_id,\n        customer_id: this.formData.customer_id,\n        product_name: this.formData.product_name,\n        quantity: parseInt(this.formData.quantity, 10),\n        unit_price: parseFloat(this.formData.unit_price),\n        total_amount: parseFloat(this.formData.total_amount),\n        type: 'sale_return'\n      };\n      console.log(\"Params being sent:\", params);\n      axios.post('http://localhost:5280/api/invoice/invoice-create-sale', params, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        swal({\n          title: \"Invoce created\",\n          icon: \"success\"\n        });\n        console.log(\"Invoce created\", response.data);\n        this.updateStock(this.formData.stock_id, params.quantity, params.unit_price);\n      }).catch(error => {\n        console.log(\"Error creating invoce\", error.response ? error.response.data : error);\n      });\n    },\n    formDataAddValue(invoice) {\n      this.formData.product_name = invoice.product_name, this.formData.supplier_name = invoice.supplier_name, this.formData.supplier_id = invoice.supplier_id, this.formData.quantity = invoice.quantity, this.formData.unit_price = invoice.unit_price, this.formData.total_amount = invoice.quantity * invoice.unit_price;\n    },\n    updateStock(id, quantitySold, unitPrice) {\n      const params = {\n        stock_id: id,\n        quantity: quantitySold,\n        unit_price: unitPrice\n      };\n      console.log(\"params değerleri:\" + params);\n      axios.post('http://localhost:5280/api/stock/stock-update', params, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        console.log(\"Stock updated\", response.data);\n      }).catch(error => {\n        console.log(\"Error updating stock\", error.response ? error.response.data : error);\n        swal({\n          title: \"Stock update failed\",\n          text: \"Could not update stock\",\n          icon: \"error\"\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","swal","name","data","invoices","formData","product_name","supplier_name","supplier_id","quantity","unit_price","total_amount","mounted","getInvoice","methods","params","type","post","headers","then","response","catch","error","title","text","icon","dangerMode","console","returnSaleInvoice","invoice","formDataAddValue","log","customer_id","parseInt","parseFloat","updateStock","stock_id","id","quantitySold","unitPrice"],"sources":["/Users/mertkezer/Documents/MuhasebeProgrami/clientapp/src/components/Invoices/InvoiceSaleReturnComponent.vue"],"sourcesContent":["<template>\n  <table class=\"table table-dark\">\n      <thead>\n          <tr>\n              <th class=\"p-3\">Product Name</th>\n              <th>Supplier</th>\n              <th>Supplier Id</th>\n              <th>Quantity</th>\n              <th>Unit Price</th>\n              <th>Total Amount</th>\n              <th>Return</th>\n          </tr>\n      </thead>\n      <tbody>\n          <tr v-for=\"(invoice, index) in invoices\" :key=\"index\">\n              <td class=\"p-3\">{{ invoice.product_name }}</td>\n              <td>{{ invoice.supplier_name }}</td>\n              <td>{{ invoice.supplier_id }}</td>\n              <td>{{ invoice.quantity }}</td>\n              <td>{{ invoice.unit_price }}</td>\n              <td>{{ invoice.unit_price * invoice.quantity }}</td>\n              <td><button class=\"btn btn-primary\" @click=\"returnSaleInvoice(invoice)\">Return</button></td>\n          </tr>\n      </tbody>\n  </table>\n</template>\n\n<script>\nimport axios from 'axios';\nimport swal from 'sweetalert';\n\nexport default {\n  name: \"InvoiceSaleReturnComponent\",\n  data() {\n      return {\n          invoices: [],\n          formData:{\n            product_name:'',\n            supplier_name:'',\n            supplier_id:0,\n            quantity:0,\n            unit_price:0.00,\n            total_amount:0.00\n          }\n      }\n  },\n  mounted() {\n      this.getInvoice();\n  },\n  methods: {\n      getInvoice() {\n          const params = {\n              type: 'sale'\n          };\n          axios.post('http://localhost:5280/api/invoice/invoice-get-sale', params, { headers: { 'Content-Type': 'application/json' } })\n              .then(response => {\n                  if (response != null && response.data != null)\n                      this.invoices = response.data; \n              })\n              .catch(error => {\n                  swal({ title: \"Sale return invoice not listed\", text: \"Error when listing stock\", icon: \"warning\", dangerMode: true });\n                  console.error(\"stocks not get\", error);\n              });\n      },\n      returnSaleInvoice(invoice){\n          this.formDataAddValue(invoice);\n          console.log(\"Form Data:\", this.formData);\n            const params = {\n              supplier_id: this.formData.supplier_id,\n              customer_id: this.formData.customer_id,\n              product_name: this.formData.product_name,\n              quantity: parseInt(this.formData.quantity, 10),\n              unit_price: parseFloat(this.formData.unit_price),\n              total_amount:parseFloat(this.formData.total_amount),\n              type:'sale_return'\n            };\n            console.log(\"Params being sent:\", params);\n            axios.post('http://localhost:5280/api/invoice/invoice-create-sale', params, {headers: { 'Content-Type': 'application/json' }})\n            .then(response => {\n              swal({title:\"Invoce created\",icon:\"success\"})\n              console.log(\"Invoce created\", response.data);\n              this.updateStock(this.formData.stock_id, params.quantity ,params.unit_price);\n            })\n            .catch(error => {\n                console.log(\"Error creating invoce\", error.response ? error.response.data : error); \n            });\n      },\n      formDataAddValue(invoice){\n        this.formData.product_name = invoice.product_name,\n        this.formData.supplier_name = invoice.supplier_name,\n        this.formData.supplier_id = invoice.supplier_id,\n        this.formData.quantity = invoice.quantity,\n        this.formData.unit_price = invoice.unit_price,\n        this.formData.total_amount = invoice.quantity * invoice.unit_price;\n      },\n      updateStock(id, quantitySold, unitPrice) {\n          const params = {\n              stock_id: id,\n              quantity: quantitySold,\n              unit_price: unitPrice\n          }\n          console.log(\"params değerleri:\"+params);\n          axios.post('http://localhost:5280/api/stock/stock-update',params, {headers: { 'Content-Type': 'application/json' }})\n          .then(response => {\n              console.log(\"Stock updated\", response.data);\n          })\n          .catch(error => {\n              console.log(\"Error updating stock\", error.response ? error.response.data : error);\n              swal({ title: \"Stock update failed\", text: \"Could not update stock\", icon: \"error\" });\n          });\n        }\n}\n}\n</script>\n\n<style>\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}