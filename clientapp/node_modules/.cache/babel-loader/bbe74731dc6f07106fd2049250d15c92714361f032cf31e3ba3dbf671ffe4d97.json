{"ast":null,"code":"import axios from 'axios';\nimport swal from 'sweetalert';\nexport default {\n  data() {\n    return {\n      invoices: [],\n      formData: {\n        product_name: '',\n        supplier_id: 0,\n        customer_id: 0,\n        stock_id: 0,\n        quantity: 0,\n        unit_price: 0.00,\n        total_amount: 0.00\n      }\n    };\n  },\n  mounted() {\n    this.getInvoice();\n  },\n  methods: {\n    getInvoice() {\n      const params = {\n        type: 'purchase'\n      };\n      axios.post('http://localhost:5280/api/invoice/invoice-get-sale', params, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        if (response != null && response.data != null) this.invoices = response.data;\n      }).catch(error => {\n        swal({\n          title: \"Sale return invoice not listed\",\n          text: \"Error when listing stock\",\n          icon: \"warning\",\n          dangerMode: true\n        });\n        console.error(\"stocks not get\", error);\n      });\n    },\n    returnPurchaseInvoice(invoice) {\n      this.formDataAddValue(invoice);\n      console.log(\"Form Data:\", this.formData);\n      const params = {\n        supplier_id: this.formData.supplier_id,\n        customer_id: this.formData.customer_id,\n        stock_id: this.formData.stock_id,\n        product_name: this.formData.product_name,\n        quantity: parseInt(this.formData.quantity, 10),\n        unit_price: parseFloat(this.formData.unit_price),\n        total_amount: parseFloat(this.formData.total_amount),\n        invoice_type: 'purchase_return'\n      };\n      console.log(\"Params being sent:\", params);\n      axios.post('http://localhost:5280/api/invoice/invoice-create-purchase', params, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        swal({\n          title: \"Invoice created\",\n          icon: \"success\"\n        });\n        console.log(\"Invoice Created\", response.data);\n        this.updateStock(params.stock_id, params.quantity, params.unit_price);\n      }).catch(error => {\n        console.log(\"Error creating invoice\", error.response ? error.response.data : error);\n      });\n    },\n    formDataAddValue(invoice) {\n      this.formData.product_name = invoice.product_name, this.formData.supplier_name = invoice.supplier_name, this.formData.supplier_id = invoice.supplier_id, this.formData.quantity = invoice.quantity, this.formData.unit_price = invoice.unit_price, this.formData.total_amount = invoice.quantity * invoice.unit_price;\n      this.formData.stock_id = invoice.stock_id;\n      this.formData.customer_id = invoice.customer_id;\n    },\n    updateStock(id, quantitySold, unitPrice) {\n      const params = {\n        stock_id: id,\n        quantity: quantitySold,\n        unit_price: unitPrice\n      };\n      console.log(\"params value:\" + params);\n      axios.post('http://localhost:5280/api/stock/stock-update-add', params, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        console.log(\"Stock updated\", response.data);\n      }).catch(error => {\n        console.log(\"Error updating stock\", error.response ? error.response : error);\n        swal({\n          title: \"Stock update failed\",\n          text: \"Could not update stock\",\n          icon: \"error\"\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","swal","data","invoices","formData","product_name","supplier_id","customer_id","stock_id","quantity","unit_price","total_amount","mounted","getInvoice","methods","params","type","post","headers","then","response","catch","error","title","text","icon","dangerMode","console","returnPurchaseInvoice","invoice","formDataAddValue","log","parseInt","parseFloat","invoice_type","updateStock","supplier_name","id","quantitySold","unitPrice"],"sources":["C:\\Users\\Polisoft WEB\\Documents\\MuhasebeProgrami\\clientapp\\src\\components\\Invoices\\InvoicePurchaseReturnComponent.vue"],"sourcesContent":["<template>\r\n    <table class=\"table table-dark\">\r\n        <thead>\r\n            <tr>\r\n                <th class=\"p-3\">Product Name</th>\r\n                <th>Supplier</th>\r\n                <th>Supplier Id</th>\r\n                <th>Stock Id</th>\r\n                <th>Quantity</th>\r\n                <th>Unit Price</th>\r\n                <th>Total Amount</th>\r\n                <th>Return</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr v-for=\"(invoice, index) in invoices\" :key=\"index\">\r\n                <td class=\"p-3\">{{ invoice.product_name }}</td>\r\n                <td>{{ invoice.supplier_name }}</td>\r\n                <td>{{ invoice.supplier_id }}</td>\r\n                <td>{{ invoice.stock_id }}</td>\r\n                <td>{{ invoice.quantity }}</td>\r\n                <td>{{ invoice.unit_price }}</td>\r\n                <td>{{ invoice.total_amount}}</td>\r\n                <td><button class=\"btn btn-primary\" @click=\"returnPurchaseInvoice(invoice)\">Return</button></td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    </template>\r\n<script>\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\nexport default {\r\n    data(){\r\n        return{\r\n        invoices: [],\r\n        formData:{\r\n            product_name:'',\r\n            supplier_id:0,\r\n            customer_id:0,\r\n            stock_id:0,\r\n            quantity:0,\r\n            unit_price:0.00,\r\n            total_amount:0.00,\r\n        },\r\n        \r\n    }\r\n    },\r\n    mounted(){\r\n        this.getInvoice();\r\n    },\r\n    methods:{\r\n        getInvoice(){\r\n            const params = {\r\n                type: 'purchase'\r\n            };\r\n            axios.post('http://localhost:5280/api/invoice/invoice-get-sale',params,{ headers: { 'Content-Type': 'application/json' } })\r\n            .then(response => {\r\n                if (response != null && response.data != null)\r\n                    this.invoices = response.data; \r\n                })\r\n            .catch(error => {\r\n                swal({ title: \"Sale return invoice not listed\", text: \"Error when listing stock\", icon: \"warning\", dangerMode: true });\r\n                console.error(\"stocks not get\", error);\r\n                });\r\n        },\r\n        returnPurchaseInvoice(invoice){\r\n            this.formDataAddValue(invoice);\r\n            console.log(\"Form Data:\",this.formData);\r\n            const params= {\r\n                supplier_id: this.formData.supplier_id,\r\n                customer_id: this.formData.customer_id,\r\n                stock_id: this.formData.stock_id,\r\n                product_name: this.formData.product_name,\r\n                quantity: parseInt(this.formData.quantity,10),\r\n                unit_price: parseFloat(this.formData.unit_price),\r\n                total_amount: parseFloat(this.formData.total_amount),\r\n                invoice_type: 'purchase_return'\r\n            };\r\n            console.log(\"Params being sent:\", params);\r\n            axios.post('http://localhost:5280/api/invoice/invoice-create-purchase',params,{headers:{'Content-Type':'application/json'}})\r\n            .then(response => {\r\n                swal({title:\"Invoice created\",icon:\"success\"})\r\n                console.log(\"Invoice Created\",response.data);\r\n                this.updateStock(params.stock_id, params.quantity,params.unit_price);\r\n            })\r\n            .catch(error => {\r\n                console.log(\"Error creating invoice\",error.response ? error.response.data : error)\r\n            })\r\n        },\r\n        formDataAddValue(invoice)\r\n        {\r\n            this.formData.product_name = invoice.product_name,\r\n            this.formData.supplier_name = invoice.supplier_name,\r\n            this.formData.supplier_id = invoice.supplier_id,\r\n            this.formData.quantity = invoice.quantity,\r\n            this.formData.unit_price = invoice.unit_price,\r\n            this.formData.total_amount = invoice.quantity * invoice.unit_price;\r\n            this.formData.stock_id = invoice.stock_id;\r\n            this.formData.customer_id = invoice.customer_id;\r\n        },\r\n        updateStock(id,quantitySold,unitPrice){\r\n            const params = {\r\n                stock_id: id,\r\n                quantity: quantitySold,\r\n                unit_price: unitPrice\r\n            }\r\n            console.log(\"params value:\"+params);\r\n            axios.post('http://localhost:5280/api/stock/stock-update-add',params, {headers: { 'Content-Type': 'application/json' }})\r\n            .then(response => {\r\n                console.log(\"Stock updated\",response.data)\r\n            })\r\n            .catch(error => {\r\n                console.log(\"Error updating stock\",error.response ? error.response : error)\r\n                swal({ title: \"Stock update failed\", text: \"Could not update stock\", icon: \"error\" });\r\n            })\r\n        }\r\n    }\r\n}\r\n</script>    \r\n<style>\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}